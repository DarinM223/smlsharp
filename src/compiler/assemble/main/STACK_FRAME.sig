(**
 * Copyright (c) 2006, Tohoku University.
 *
 * @author YAMATODANI Kiyoshi
 * @version $Id: STACK_FRAME.sig,v 1.9 2006/02/18 04:59:16 ohori Exp $
 *)
signature STACK_FRAME =
sig

  (***************************************************************************)

  (**
   * @params allocInfo
   * @param allocInfo frame allocation info generated by SlotAllocator.
   * @return a slot map which is a union of slot maps for each types
   *)
  val fixFrameLayout :
      AllocationInfo.frameAllocationInfo ->
      (** frame size *) BasicTypes.UInt32
      * (** unioned slot map *) SlotMap.map
      * (** adjusted allocation info *) AllocationInfo.frameAllocationInfo

  (**
   * calculates the number of slots required for the frame.
   *)
  val frameSize
      : {
          pointersSlots : BasicTypes.UInt32,
          atomsSlots : BasicTypes.UInt32,
          recordsSlotsList : BasicTypes.UInt32 list
        }
        -> BasicTypes.UInt32

  (***************************************************************************)

end
