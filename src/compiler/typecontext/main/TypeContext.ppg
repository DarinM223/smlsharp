(**
 * Copyright (c) 2006, Tohoku University.
 *	
 * type structures.
 * @author OHORI Atushi
 * @author Liu Bochao
 * @author YAMATODANI Kiyoshi
 * @version $Id: TypeContext.ppg,v 1.10 2006/02/18 11:06:34 duchuu Exp $
 *)
structure TypeContext =
struct
  local
    open Types Path

  in

  (* dupcliate specifiction *)
  exception exDuplicateElem of string

  (*%
   * @params(btvEnv)
   * @formatter(smapWithEnclosure) SmlppgUtil.formatSmapWithEnclosure
   * @formatter(formatIdState) Types.format_idState
   *)
  type typeContextVarEnv =
       (*%
        * @format(idState:formatIdState smap:smapWithEnclosure) 
        *    smap(idState()(btvEnv))(":", +1, ~2[1"valbinds"] + 1, "")
        *)
        idState SEnv.map

  (*************************************************************)

 (*%
   * @params(btvEnv)
   * @formatter(formatTcEnv) Types.format_tyConEnv
   * @formatter(formatvarEnv) Types.format_typeContextVarEnv
   * @formatter(formatstrEnv) Types.format_strEnv
   * @formatter(formatsigEnv) Types.format_sigEnv
   * @formatter(formatfunEnv) Types.format_funEnv
   * @formatter(formattyNameSet) Types.format_tyNameSet
   *)
  type context = 
       (*%
        * @format({tyConEnv:tyConEnv:formatTcEnv,
        *          varEnv:varEnv:typeContextVarEnv,
        *          strEnv:strEnv:formatstrEnv,
        *          sigEnv:sigEnv:formatsigEnv,
        *          funEnv:funEnv:formatfunEnv}) 
        *        "TYCONENV" +1 5[tyConEnv()(btvEnv)] +1 
        *        "VARENV" +1 5[varEnv()(btvEnv)] +1 
        *        "STRENV" +1 5[strEnv()(btvEnv)] +1 
        *        "SIGENV" +1 5[sigEnv()(btvEnv)] +1
        *        "FUNENV" +1 5[funEnv] +1
        *)
       {
        tyConEnv : tyConEnv,
        varEnv : varEnv,
        strEnv : strEnv,
        sigEnv : sigEnv,
        funEnv : funEnv
       }

  val emptyContext =
      {
        tyConEnv = SEnv.empty,
        varEnv = SEnv.empty,
        strEnv = SEnv.empty,
        sigEnv = SEnv.empty,
        funEnv = SEnv.empty
      } : context

  (**
   * @params (context, path, name)
   * @param context
   * @param path the path of the structure
   * @param name name of tyCon to search
   *)
  fun lookupLongTyCon ({tyConEnv, strEnv,...} : context, path, name) = 
      let
        fun lookUp (tyConEnv, strEnv) NilPath =
            SEnv.find(tyConEnv, name)
          | lookUp (tyConEnv, strEnv)  (PStructure(id, strid, path)) =
            (case SEnv.find(strEnv, strid) of 
               NONE => NONE
             | SOME(STRUCTURE {env = (tyConEnv, _, strEnv), ...}) =>
                 lookUp (tyConEnv, strEnv) path
            )
      in
        case lookUp (tyConEnv, strEnv) path of
          NONE => 
          let 
            val newpath = PStructure(topStrID, topStrName, path)
          in
            (newpath, lookUp (tyConEnv, strEnv) newpath)
          end
        | tyConoption => (path, tyConoption)
      end

  (**
   * @params (context, path, name)
   * @param context
   * @param path the path of the structure
   * @param name name of variable to search
   *)
  fun lookupLongVar ({strEnv, varEnv,...} : context, path, name) =
      let
        fun lookUp (varEnv, strEnv) NilPath = 
            SEnv.find(varEnv, name)
          | lookUp (varEnv, strEnv) (PStructure(strid, strName, path)) =
            (case SEnv.find(strEnv, strName) of 
               NONE => NONE
             | SOME(STRUCTURE {env = (_, varEnv, strEnv), ...}) =>
               lookUp (varEnv, strEnv) path)
      in
        case lookUp (varEnv, strEnv) path of
          NONE => 
            let 
              val newpath = PStructure(topStrID, topStrName, path)
            in
              (newpath, lookUp (varEnv, strEnv) newpath)
            end
        | Varoption => (path, Varoption)
      end

  fun lookupLongStructure ({strEnv,...}:context, path) =
      let 
        fun lookUp _ NilPath = 
            raise Control.Bug "NilPath in lookupLongStructure"
          | lookUp strEnv (PStructure(strid, strName, NilPath)) =
            (case (SEnv.find(strEnv,strName)) of
               NONE => NONE
             | SOME(STRUCTURE strPathInfo) => SOME strPathInfo)
          | lookUp strEnv (PStructure(strid, strName, path)) = 
            (case SEnv.find(strEnv, strName) of
               NONE => NONE
             | SOME(STRUCTURE{env = (_,_,strEnv), ...}) => lookUp strEnv path)
      in
        case lookUp strEnv path of
          NONE => 
            let 
              val newpath = PStructure(topStrID, topStrName, path)
            in
              (newpath, lookUp strEnv newpath)
            end
        | x => (path, x)
      end

   fun injectTyConEnvToContext tyConEnv = 
      {
        tyConEnv = tyConEnv,
        varEnv = SEnv.empty,
        strEnv = SEnv.empty,
        sigEnv = SEnv.empty,
        funEnv = SEnv.empty
      } 

   fun injectVarEnvToContext varEnv = 
      {
        tyConEnv = SEnv.empty,
        varEnv = varEnv,
        strEnv = SEnv.empty,
        sigEnv = SEnv.empty,
        funEnv = SEnv.empty
      } 

   fun injectStrEnvToContext strEnv = 
      {
        tyConEnv = SEnv.empty,
        varEnv = SEnv.empty,
        strEnv = strEnv,
        sigEnv = SEnv.empty,
        funEnv = SEnv.empty
      } 

   fun injectSigEnvToContext sigEnv = 
      {
        tyConEnv = SEnv.empty,
        varEnv = SEnv.empty,
        strEnv = SEnv.empty,
        sigEnv = sigEnv,
        funEnv = SEnv.empty
      } 

   fun injectEnvToContext (tyConEnv,varEnv,strEnv) = 
      {
        tyConEnv = tyConEnv,
        varEnv = varEnv,
        strEnv = strEnv,
        sigEnv = SEnv.empty,
        funEnv = SEnv.empty
      } 

   fun bindTyConInEmptyContext (string, tyCon) = 
      {
        tyConEnv = SEnv.singleton(string, tyCon),
        varEnv = SEnv.empty,
        strEnv = SEnv.empty,
        sigEnv = SEnv.empty,
        funEnv = SEnv.empty
      } 

   fun bindVarInEmptyContext (string, idstate) = 
      {
        tyConEnv = SEnv.empty,
        varEnv = SEnv.singleton(string, idstate),
        strEnv = SEnv.empty,
        sigEnv = SEnv.empty,
        funEnv = SEnv.empty
      } 

   fun bindStrInEmptyContext (string, strEnvEntry) = 
      {
        tyConEnv = SEnv.empty,
        varEnv = SEnv.empty,
        strEnv = SEnv.singleton(string, strEnvEntry),
        sigEnv = SEnv.empty,
        funEnv = SEnv.empty
      } 

   fun bindSigInEmptyContext (string, sigma) = 
      {
        tyConEnv = SEnv.empty,
        varEnv = SEnv.empty,
        strEnv = SEnv.empty,
        sigEnv = SEnv.singleton(string, sigma),
        funEnv = SEnv.empty
      } 
   fun bindFunInEmptyContext (string, phi) = 
       {
        tyConEnv = SEnv.empty,
        varEnv = SEnv.empty,
        strEnv = SEnv.empty,
        sigEnv = SEnv.empty,
        funEnv = SEnv.singleton(string, phi)
        } 

   fun bindTyConInContext ({tyConEnv, varEnv, strEnv, sigEnv, funEnv} : context, 
                           string, tyCon)  = 
        {
          tyConEnv = SEnv.insert(tyConEnv, string, tyCon),
          varEnv = varEnv,
          strEnv = strEnv,
          sigEnv = sigEnv,
          funEnv = funEnv
        }

   fun bindVarInContext ({tyConEnv, varEnv, strEnv, sigEnv, funEnv}: context, 
                         string, idstate) = 
        {
          tyConEnv = tyConEnv,
          varEnv = SEnv.insert(varEnv,string, idstate),
          strEnv = strEnv,
          sigEnv = sigEnv,
          funEnv = funEnv
        }

   fun bindStrInContext ({tyConEnv, varEnv, strEnv, sigEnv, funEnv}: context, 
                         string, env) = 
        {
          tyConEnv = tyConEnv,
          varEnv = varEnv,
          strEnv = SEnv.insert(strEnv, string, env),
          sigEnv = sigEnv,
          funEnv = funEnv
        }

   fun bindSigInContext ({tyConEnv, varEnv, strEnv, sigEnv, funEnv}: context, string, sigexp) = 
        {
          tyConEnv = tyConEnv,
          varEnv = varEnv,
          strEnv = strEnv,
          sigEnv = SEnv.insert(sigEnv, string, sigexp),
          funEnv = funEnv
        }

   fun extendContextWithTyConEnv ({tyConEnv, varEnv, strEnv, sigEnv, funEnv}: context, 
                                  newTyConEnv)
     = 
        {
          tyConEnv = SEnv.unionWith #1 (newTyConEnv, tyConEnv),
          varEnv = varEnv,
          strEnv = strEnv,
          sigEnv = sigEnv,
          funEnv = funEnv
          }

   fun extendContextWithVarEnv ({tyConEnv, varEnv, strEnv, sigEnv, funEnv}: context, newVarEnv) = 
        {
          tyConEnv = tyConEnv,
          varEnv = SEnv.unionWith #1 (newVarEnv, varEnv),
          strEnv = strEnv,
          sigEnv = sigEnv,
          funEnv = funEnv
        }

   fun extendContextWithStrEnv ({tyConEnv, varEnv, strEnv, sigEnv, funEnv}: context, newStrEnv) = 
        {
          tyConEnv = tyConEnv,
          varEnv = varEnv,
          strEnv = SEnv.unionWith #1 (newStrEnv, strEnv),
          sigEnv = sigEnv,
          funEnv = funEnv
        }

   fun extendContextWithSigEnv ({tyConEnv, varEnv, strEnv, sigEnv, funEnv}: context, newSigEnv) = 
        {
          tyConEnv = tyConEnv,
          varEnv = varEnv,
          strEnv = strEnv,
          sigEnv = SEnv.unionWith #1 (newSigEnv, sigEnv),
          funEnv = funEnv
        }

   fun extendContextWithEnv ({tyConEnv, varEnv, strEnv, sigEnv, funEnv}: context, (newTyConEnv, newVarEnv, newStrEnv)) = 
        {
          tyConEnv = SEnv.unionWith #1 (newTyConEnv, tyConEnv),
          varEnv = SEnv.unionWith #1 (newVarEnv, varEnv),
          strEnv = SEnv.unionWith #1 (newStrEnv, strEnv),
          sigEnv = sigEnv,
          funEnv = funEnv
        }

   fun extendContextWithContext 
     {
      oldContext = {tyConEnv, varEnv, strEnv, sigEnv, funEnv} : context,
      newContext ={tyConEnv=newTyConEnv, 
                   varEnv = newVarEnv, 
                   strEnv=newStrEnv, 
                   sigEnv = newSigEnv,
                   funEnv = newFunEnv}: context
      }
     =
     {
      tyConEnv = SEnv.unionWith #1 (newTyConEnv, tyConEnv),
      varEnv =  SEnv.unionWith #1 (newVarEnv, varEnv),
      strEnv = SEnv.unionWith #1 (newStrEnv, strEnv),
      sigEnv = SEnv.unionWith #1 (newSigEnv, sigEnv),
      funEnv = SEnv.unionWith #1 (newFunEnv, funEnv)
      }

   fun unionContexts 
     (
      {tyConEnv=newTyConEnv, 
       varEnv = newVarEnv, 
       strEnv=newStrEnv, 
       sigEnv = newSigEnv,
       funEnv = newFunEnv}: context,
      {tyConEnv, varEnv, strEnv, sigEnv, funEnv} : context
      )
     =
     let
       val checkDuplication = fn (key,x,y) => raise exDuplicateElem(key)
     in
       {
        tyConEnv = SEnv.unionWithi checkDuplication  (newTyConEnv, tyConEnv),
        varEnv =  SEnv.unionWithi checkDuplication (newVarEnv, varEnv),
        strEnv = SEnv.unionWithi checkDuplication (newStrEnv, strEnv),
        sigEnv = SEnv.unionWithi checkDuplication (newSigEnv, sigEnv),
        funEnv = SEnv.unionWithi checkDuplication (newFunEnv, funEnv)
        }
     end

   fun mergeContexts 
     (
      {tyConEnv=newTyConEnv, 
       varEnv = newVarEnv, 
       strEnv=newStrEnv, 
       sigEnv = newSigEnv,
       funEnv = newFunEnv}: context,
      {tyConEnv, varEnv, strEnv, sigEnv, funEnv} : context
      )
     =
     {
      tyConEnv = SEnv.unionWith #1  (newTyConEnv, tyConEnv),
      varEnv =  SEnv.unionWith #1 (newVarEnv, varEnv),
      strEnv = SEnv.unionWith #1 (newStrEnv, strEnv),
      sigEnv = SEnv.unionWith #1 (newSigEnv, sigEnv),
      funEnv = SEnv.unionWith #1 (newFunEnv, funEnv)
      }

  fun getStructureEnvFromContext (context : context) =
      (
       #tyConEnv context,
       #varEnv   context,
       #strEnv   context
       ) 

  fun mergeBtvEnv (btvEnv1,btvEnv2) = IEnv.unionWith #1 (btvEnv1,btvEnv2)

  fun mergeSigEnv (sigEnv1,sigEnv2) = SEnv.unionWith #1 (sigEnv1,sigEnv2)

  fun mergeStrEnv (strEnv1,strEnv2) = SEnv.unionWith #1 (strEnv1,strEnv2)

  fun mergeTyNameSet(tyNameSet1,tyNameSet2) =
      ISet.union(tyNameSet1,tyNameSet2)


  (* ToDo : *)
  fun contextToString context =
      Control.prettyPrint (format_context nil context)

end
end
